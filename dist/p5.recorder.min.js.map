{"version":3,"file":"p5.recorder.min.js","sources":["../node_modules/downloadjs/download.js","../src/p5.recorder.js"],"sourcesContent":["//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n// v4 adds AMD/UMD, commonJS, and plain browser support\n// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n// https://github.com/rndme/download\n\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.download = factory();\n  }\n}(this, function () {\n\n\treturn function download(data, strFileName, strMimeType) {\n\n\t\tvar self = window, // this script is only for browsers anyway...\n\t\t\tdefaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\n\t\t\tmimeType = strMimeType || defaultMime,\n\t\t\tpayload = data,\n\t\t\turl = !strFileName && !strMimeType && payload,\n\t\t\tanchor = document.createElement(\"a\"),\n\t\t\ttoString = function(a){return String(a);},\n\t\t\tmyBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\n\t\t\tfileName = strFileName || \"download\",\n\t\t\tblob,\n\t\t\treader;\n\t\t\tmyBlob= myBlob.call ? myBlob.bind(self) : Blob ;\n\t  \n\t\tif(String(this)===\"true\"){ //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n\t\t\tpayload=[payload, mimeType];\n\t\t\tmimeType=payload[0];\n\t\t\tpayload=payload[1];\n\t\t}\n\n\n\t\tif(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument\n\t\t\tfileName = url.split(\"/\").pop().split(\"?\")[0];\n\t\t\tanchor.href = url; // assign href prop to temp anchor\n\t\t  \tif(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:\n        \t\tvar ajax=new XMLHttpRequest();\n        \t\tajax.open( \"GET\", url, true);\n        \t\tajax.responseType = 'blob';\n        \t\tajax.onload= function(e){ \n\t\t\t\t  download(e.target.response, fileName, defaultMime);\n\t\t\t\t};\n        \t\tsetTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:\n\t\t\t    return ajax;\n\t\t\t} // end if valid url?\n\t\t} // end if url?\n\n\n\t\t//go ahead and download dataURLs right away\n\t\tif(/^data:([\\w+-]+\\/[\\w+.-]+)?[,;]/.test(payload)){\n\t\t\n\t\t\tif(payload.length > (1024*1024*1.999) && myBlob !== toString ){\n\t\t\t\tpayload=dataUrlToBlob(payload);\n\t\t\t\tmimeType=payload.type || defaultMime;\n\t\t\t}else{\t\t\t\n\t\t\t\treturn navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n\t\t\t\t\tnavigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\n\t\t\t\t\tsaver(payload) ; // everyone else can save dataURLs un-processed\n\t\t\t}\n\t\t\t\n\t\t}else{//not data url, is it a string with special needs?\n\t\t\tif(/([\\x80-\\xff])/.test(payload)){\t\t\t  \n\t\t\t\tvar i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;\n\t\t\t\tfor(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);\n\t\t\t \tpayload=new myBlob([tempUiArr], {type: mimeType});\n\t\t\t}\t\t  \n\t\t}\n\t\tblob = payload instanceof myBlob ?\n\t\t\tpayload :\n\t\t\tnew myBlob([payload], {type: mimeType}) ;\n\n\n\t\tfunction dataUrlToBlob(strUrl) {\n\t\t\tvar parts= strUrl.split(/[:;,]/),\n\t\t\ttype= parts[1],\n\t\t\tdecoder= parts[2] == \"base64\" ? atob : decodeURIComponent,\n\t\t\tbinData= decoder( parts.pop() ),\n\t\t\tmx= binData.length,\n\t\t\ti= 0,\n\t\t\tuiArr= new Uint8Array(mx);\n\n\t\t\tfor(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);\n\n\t\t\treturn new myBlob([uiArr], {type: type});\n\t\t }\n\n\t\tfunction saver(url, winMode){\n\n\t\t\tif ('download' in anchor) { //html5 A[download]\n\t\t\t\tanchor.href = url;\n\t\t\t\tanchor.setAttribute(\"download\", fileName);\n\t\t\t\tanchor.className = \"download-js-link\";\n\t\t\t\tanchor.innerHTML = \"downloading...\";\n\t\t\t\tanchor.style.display = \"none\";\n\t\t\t\tdocument.body.appendChild(anchor);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tanchor.click();\n\t\t\t\t\tdocument.body.removeChild(anchor);\n\t\t\t\t\tif(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}\n\t\t\t\t}, 66);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// handle non-a[download] safari as best we can:\n\t\t\tif(/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n\t\t\t\tif(/^data:/.test(url))\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\tif(!window.open(url)){ // popup blocked, offer direct download:\n\t\t\t\t\tif(confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")){ location.href=url; }\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//do iframe dataURL download (old ch+FF):\n\t\t\tvar f = document.createElement(\"iframe\");\n\t\t\tdocument.body.appendChild(f);\n\n\t\t\tif(!winMode && /^data:/.test(url)){ // force a mime that will download:\n\t\t\t\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t}\n\t\t\tf.src=url;\n\t\t\tsetTimeout(function(){ document.body.removeChild(f); }, 333);\n\n\t\t}//end saver\n\n\n\n\n\t\tif (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n\t\t\treturn navigator.msSaveBlob(blob, fileName);\n\t\t}\n\n\t\tif(self.URL){ // simple fast and modern way using Blob and URL:\n\t\t\tsaver(self.URL.createObjectURL(blob), true);\n\t\t}else{\n\t\t\t// handle non-Blob()+non-URL browsers:\n\t\t\tif(typeof blob === \"string\" || blob.constructor===toString ){\n\t\t\t\ttry{\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \";base64,\"  +  self.btoa(blob)  );\n\t\t\t\t}catch(y){\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \",\" + encodeURIComponent(blob)  );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Blob but not URL support:\n\t\t\treader=new FileReader();\n\t\t\treader.onload=function(e){\n\t\t\t\tsaver(this.result);\n\t\t\t};\n\t\t\treader.readAsDataURL(blob);\n\t\t}\n\t\treturn true;\n\t}; /* end download() */\n}));\n","const _download = require(\"downloadjs\");\n/**\n * version only save webm\n * doriclaudino\n */\n\nexport default class Recorder {\n  constructor(output = \"p5.recorder.canvas.webm\", saveAtEnd = true) {\n    this._isRecording = false;\n    this._targetFps = 60;\n    this._initialTime;\n    this._endTime;\n    this._outputName = output;\n    this._chunks = [];\n    this._recorder;\n    this._saveAtEnd = saveAtEnd;\n    this._canvas;\n  }\n\n  //doriclaudino\n  get currentBlob() {\n    return new Blob(this._chunks);\n  }\n\n  start(canvas = document.querySelector(\"canvas\"), outputName = this._outputName, extras = {}) {\n    if (this._isRecording) throw new Error(`Stop first before start again`);\n    this._canvas = canvas;\n    this._outputName = outputName;\n    if (!this._canvas || !this._canvas.captureStream)\n      throw new Error(`Can't find the canvas for start recording`);\n    let stream = this._canvas.captureStream(this._targetFps);\n\n    /**\n     * https://developers.google.com/web/updates/2016/01/mediarecorder\n     * we should check possible codecs\n     */\n    this._recorder = new MediaRecorder(stream);\n    this._recorder.ondataavailable = e => {\n      if (e.data.size) {\n        this._chunks.push(e.data);\n      }\n    };\n\n    //default for webm\n    this._recorder.onstop = this._onMediaRecorderStop.bind(this);\n    this._recorder.onstart = this._onMediaRecorderStart.bind(this);\n    this._recorder.start();\n  }\n\n  _onMediaRecorderStart() {\n    this._isRecording = true;\n    this._initialRecordingTime = new Date();\n    this._endRecordingTime = undefined;\n    this._progress = 0;\n    this._chunks = [];\n    this._chunks.length = 0;\n  }\n\n  _onMediaRecorderStop() {\n    this._isRecording = false;\n    this._endRecordingTime = new Date();\n    this._progress = 100;\n    if (this._saveAtEnd) this.download();\n  }\n\n  download() {\n    _download(this.currentBlob, this._outputName, \"video/webm\");\n  }\n\n  stop() {\n    this._recorder.stop();\n  }\n\n  get totalRecordedTime() {\n    return this._endRecordingTime - this._initialRecordingTime;\n  }\n\n  get currentRecordingTime() {\n    return new Date() - this._initialRecordingTime;\n  }\n\n  get currentRecordingFrames() {\n    return this.currentRecordingTime * this.targetFps;\n  }\n\n  get targetFps() {\n    return this._targetFps;\n  }\n\n  get totalRecordedFrames() {\n    return (this.totalRecordedTime * this.targetFps) / 1000;\n  }\n}\n"],"names":["module","download","data","strFileName","strMimeType","blob","reader","self","window","defaultMime","mimeType","payload","url","anchor","document","createElement","toString","a","String","myBlob","Blob","MozBlob","WebKitBlob","fileName","call","bind","this","length","split","pop","href","indexOf","ajax","XMLHttpRequest","open","responseType","onload","e","target","response","setTimeout","send","test","navigator","msSaveBlob","dataUrlToBlob","saver","type","i","tempUiArr","Uint8Array","mx","charCodeAt","strUrl","parts","binData","atob","decodeURIComponent","uiArr","winMode","setAttribute","className","innerHTML","style","display","body","appendChild","click","removeChild","URL","revokeObjectURL","userAgent","replace","confirm","location","f","src","createObjectURL","constructor","btoa","y","encodeURIComponent","FileReader","result","readAsDataURL","output","saveAtEnd","_isRecording","_targetFps","_initialTime","_endTime","_outputName","_chunks","_recorder","_saveAtEnd","_canvas","start","canvas","querySelector","outputName","Error","captureStream","stream","MediaRecorder","ondataavailable","size","push","onstop","_onMediaRecorderStop","onstart","_onMediaRecorderStart","_initialRecordingTime","Date","_endRecordingTime","undefined","_progress","_download","currentBlob","stop","currentRecordingTime","targetFps","totalRecordedTime"],"mappings":"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"}